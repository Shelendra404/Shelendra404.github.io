{"version":3,"sources":["serviceWorker.ts","book/component/BookListHeader.tsx","book/component/BookListItem.tsx","book/component/BookList.tsx","langextensions/assertNever.ts","book/component/BookSearchControl.tsx","book/component/BookPage.tsx","langextensions/RemoteData.ts","infrastructure/FinnaLibraryClient.ts","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","BookListHeader","bookCollection","className","resultCount","books","length","BookListItem","book","filter","x","undefined","join","title","author","year","bookListItemClass","index","BookList","type","Fragment","value","map","key","Error","JSON","stringify","assertNever","BookSearchControl","bookTitle","onBookTitleChange","onSearchSubmit","searching","onSubmit","event","preventDefault","onChange","target","disabled","BookPage","bookSearcher","React","useState","setBookCollection","setBookTitle","searchCriteria","setSearchCriteria","useEffect","findBooks","then","catch","error","RemoteData","toBook","searchRecord","primaryAuthors","finnaLibraryClient","queryString","encodeURIComponent","fetch","headers","Accept","response","json","booksResponse","records","page","App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5e83cff6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { BookCollection } from 'book/model/BookCollection'\nimport React from 'react'\n\ninterface BookListHeaderProps {\n  readonly bookCollection: BookCollection\n}\n\nconst BookListHeader: React.FunctionComponent<BookListHeaderProps> = ({\n  bookCollection,\n}: BookListHeaderProps) => (\n  <div className=\"flex flex-col sm:flex-row text-2xl font-medium mb-2\">\n    <span>Tuloksia yhteens√§: {bookCollection.resultCount}</span>\n    <span className=\"sm:ml-8\">N√§ytet√§√§n: {bookCollection.books.length}</span>\n  </div>\n)\n\nexport default BookListHeader\n","import { Book } from 'book/model/Book'\nimport React from 'react'\n\ninterface BookListItemProps {\n  readonly book: Book\n  readonly className?: string\n}\n\nconst BookListItem: React.FunctionComponent<BookListItemProps> = ({\n  book,\n  className,\n}: BookListItemProps) => (\n  <div\n    className={['flex', 'p-6', className]\n      .filter(x => x !== undefined)\n      .join(' ')}\n  >\n    <span className=\"flex-1 font-medium\">{book.title}</span>\n    <span className=\"flex-1 mx-4 font-normal\">{book.author}</span>\n    <span className=\"flex-1 font-normal ml-5\">{book.year}</span>\n  </div>\n)\n\nexport default BookListItem\n","import { BookCollection } from 'book/model/BookCollection'\nimport BookListHeader from './BookListHeader'\nimport BookListItem from './BookListItem'\nimport React from 'react'\nimport { RemoteData } from 'langextensions/RemoteData'\nimport { assertNever } from 'langextensions/assertNever'\n\ninterface BookListProps {\n  readonly bookCollection: RemoteData<BookCollection>\n}\n\nfunction bookListItemClass(index: number): string {\n  return index % 2 === 0 ? 'bg-gray-100' : 'bg-gray-200'\n}\n\nconst BookList: React.FunctionComponent<BookListProps> = ({\n  bookCollection,\n}: BookListProps) => {\n  switch (bookCollection.type) {\n    case 'NotAsked':\n      return <div>Voit hakea kirjoja yll√§olevasta hakupaneelista.</div>\n    case 'Loading':\n      return <div>Ladataan kirjoja...</div>\n    case 'Failure':\n      return <div>Hups! Haku ep√§onnistui.</div>\n    case 'Success':\n      return (\n        <React.Fragment>\n          <BookListHeader bookCollection={bookCollection.value} />\n          <div className=\"flex flex-col\">\n            {bookCollection.value.books.map((book, index) => (\n              <BookListItem\n                key={`${book.title}${book.year}${book.author}`}\n                book={book}\n                className={bookListItemClass(index)}\n              />\n            ))}\n          </div>\n        </React.Fragment>\n      )\n    default:\n      assertNever(bookCollection)\n  }\n}\n\nexport default BookList\n","export function assertNever(value: never): never {\n  throw new Error(\n    `Unhandled discriminated union member: ${JSON.stringify(value)}`,\n  )\n}\n","import React from 'react'\n\ninterface BookSearchControlProps {\n  readonly bookTitle: string\n  readonly onBookTitleChange: (bookTitle: string) => void\n  readonly onSearchSubmit: () => void\n  readonly searching: boolean\n}\n\nconst BookSearchControl: React.FunctionComponent<BookSearchControlProps> = ({\n  bookTitle,\n  onBookTitleChange,\n  onSearchSubmit,\n  searching,\n}: BookSearchControlProps) => (\n  <div className=\"flex flex-col\">\n    <h2 className=\"text-3xl\">Hae kirjoja</h2>\n    <div className=\"font-light text-sm\">Kirjan tai tekij√§n nimi</div>\n    <form\n      className=\"flex flex-row max-w-sm\"\n      onSubmit={event => {\n        event.preventDefault()\n        onSearchSubmit()\n      }}\n    >\n      <input\n        className=\"flex-1 py-2 px-2 leading-tight text-lg focus:outline-none bg-gray-100 text-black\"\n        type=\"text\"\n        value={bookTitle}\n        onChange={event => onBookTitleChange(event.target.value)}\n      />\n      <button\n        className=\"text-white font-bold px-8 py-2 bg-gray-700 hover:bg-gray-800 ml-2 focus:outline-none disabled:opacity-50\"\n        type=\"submit\"\n        disabled={searching}\n      >\n        Hae\n      </button>\n    </form>\n  </div>\n)\n\nexport default BookSearchControl\n","import * as RemoteData from 'langextensions/RemoteData'\n\nimport { BookCollection } from 'book/model/BookCollection'\nimport BookList from './BookList'\nimport BookSearchControl from './BookSearchControl'\nimport { BookSearchCriteria } from 'book/model/BookSearchCriteria'\nimport { BookSearcher } from 'book/model/BookSearcher'\nimport React from 'react'\n\ninterface BookPageProps {\n  readonly bookSearcher: BookSearcher\n}\n\nconst BookPage: React.FunctionComponent<BookPageProps> = ({\n  bookSearcher,\n}: BookPageProps) => {\n  const [bookCollection, setBookCollection] = React.useState<\n    RemoteData.RemoteData<BookCollection>\n  >(RemoteData.notAsked())\n  const [bookTitle, setBookTitle] = React.useState<string>('')\n  const [searchCriteria, setSearchCriteria] = React.useState<\n    BookSearchCriteria | undefined\n  >(undefined)\n\n  React.useEffect(() => {\n    if (searchCriteria === undefined) {\n      return\n    }\n    setBookCollection(RemoteData.loading())\n    // title (optional) cleanIsbn (optional), edition (optional), year (optional)\n    bookSearcher\n      .findBooks(searchCriteria)\n      .then((books: BookCollection) => {\n        setBookCollection(RemoteData.success(books))\n      })\n      .catch(error => {\n        setBookCollection(RemoteData.failure(error))\n      })\n  }, [searchCriteria, bookSearcher])\n\n  return (\n    <div className=\"flex flex-col px-4 py-4\">\n      <BookSearchControl\n        bookTitle={bookTitle}\n        onBookTitleChange={setBookTitle}\n        onSearchSubmit={() => setSearchCriteria({ title: bookTitle })}\n        searching={RemoteData.isLoading(bookCollection)}\n      />\n      <hr className=\"my-5\" />\n      <BookList bookCollection={bookCollection} />\n    </div>\n  )\n}\n\nexport default BookPage\n","export interface NotAsked {\n  readonly type: 'NotAsked'\n}\n\nexport interface Loading {\n  readonly type: 'Loading'\n}\n\nexport interface Failure {\n  readonly type: 'Failure'\n  readonly error: Error\n}\n\nexport interface Success<Value> {\n  readonly type: 'Success'\n  readonly value: Value\n}\n\nexport function notAsked(): NotAsked {\n  return { type: 'NotAsked' }\n}\n\nexport function loading(): Loading {\n  return { type: 'Loading' }\n}\n\nexport function failure(error: Error): Failure {\n  return { type: 'Failure', error }\n}\n\nexport function success<Value>(value: Value): Success<Value> {\n  return { type: 'Success', value }\n}\n\nexport function isLoading<Value>(x: RemoteData<Value>): boolean {\n  return x.type === 'Loading'\n}\n\nexport type RemoteData<Value> = NotAsked | Loading | Failure | Success<Value>\n","import { Book } from 'book/model/Book'\nimport { BookCollection } from 'book/model/BookCollection'\nimport { BookSearchCriteria } from 'book/model/BookSearchCriteria'\nimport { BookSearcher } from 'book/model/BookSearcher'\n\ninterface FinnaClientSearchRecord {\n  readonly title: string\n  readonly year?: string\n  readonly primaryAuthors?: string\n}\n\ninterface FinnaClientSearchResponse {\n  readonly resultCount: number\n  readonly records: readonly FinnaClientSearchRecord[]\n}\n\nfunction toBook(searchRecord: FinnaClientSearchRecord): Book {\n  return {\n    title: searchRecord.title,\n    year: searchRecord.year,\n    author: searchRecord.primaryAuthors,\n  }\n}\n\n// HELMET-KIRJASTOJEN AINEISTOLUETTELOT\n// Swagger API documentation:\n// https://api.finna.fi/swagger-ui/?url=%2Fapi%2Fv1%3Fswagger#!\nexport class FinnaLibraryClient implements BookSearcher {\n  findBooks({ title }: BookSearchCriteria): Promise<BookCollection> {\n    const page = 1\n    const lookFor = `title:\"${encodeURIComponent(title)}\" OR author:\"${encodeURIComponent(title)}\"`\n    const queryParams = [\n      ['lookfor', lookFor],\n      ['type', 'AllFields'],\n      ['field[]', 'title'],\n      ['field[]', 'primaryAuthors'],\n      ['field[]', 'cleanIsbn'],\n      ['field[]', 'name'],\n      ['field[]', 'year'],\n      ['sort', 'relevance,id asc'],\n      ['page', `${page}`],\n      ['limit', '20'],\n      ['prettyPrint', 'faslse'],\n      ['lng', 'fi'],\n    ]\n\n    const queryString = queryParams\n      .map(([key, value]) => `${key}=${value}`)\n      .join('&')\n\n    return fetch(`https://api.finna.fi/api/v1/search?${queryString}`, {\n      headers: { Accept: 'application/json' },\n    })\n      .then(response => response.json())\n      .then((booksResponse: FinnaClientSearchResponse) => {\n        return {\n          resultCount: booksResponse.resultCount,\n          books:\n            booksResponse.resultCount === 0\n              ? []\n              : booksResponse.records.map(toBook),\n          page,\n        }\n      })\n  }\n}\n","import BookPage from 'book/component/BookPage'\nimport { FinnaLibraryClient } from 'infrastructure/FinnaLibraryClient'\nimport React from 'react'\n\nconst finnaLibraryClient = new FinnaLibraryClient()\n\nconst App: React.FC = () => {\n  return <BookPage bookSearcher={finnaLibraryClient} />\n}\n\nexport default App\n","import './index.css'\nimport './css/tailwind.css'\n\nimport * as serviceWorker from './serviceWorker'\n\nimport App from './App'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}